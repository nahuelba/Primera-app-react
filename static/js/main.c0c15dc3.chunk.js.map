{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","htmlFor","type","placeholder","onChange","tipe","Cita","eliminarCita","aria-label","onClick","aria-hidden","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAgKeA,EA5JI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAEDC,mBAAS,CACpCC,QAAU,GACVC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAS,KAPmB,mBAEzBC,EAFyB,KAEnBC,EAFmB,OAUGP,oBAAS,GAVZ,mBAUxBQ,EAVwB,KAUjBC,EAViB,KAa1BC,EAAkB,SAAAC,GAEpBJ,EAAe,2BACRD,GADO,kBAETK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAI1Bb,EAA+CK,EAA/CL,QAASC,EAAsCI,EAAtCJ,YAAaC,EAAyBG,EAAzBH,MAAOC,EAAkBE,EAAlBF,KAAMC,EAAYC,EAAZD,SAoC/C,OACA,eAAC,WAAD,WACI,4CAECG,EAAQ,mBAAGO,UAAU,qBAAb,+CAA0E,KAGnF,uBACIC,SAzCe,SAAAL,GACfA,EAAEM,iBAGoB,KAAnBhB,EAAQiB,QAAwC,KAAvBhB,EAAYgB,QAAkC,KAAjBf,EAAMe,QAAiC,KAAhBd,EAAKc,QAAqC,KAApBb,EAASa,QAM/GT,GAAgB,GAGhBH,EAAKa,GAAKC,cAGVrB,EAAUO,GAGVC,EAAe,CACXN,QAAU,GACVC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAS,MAnBTI,GAAgB,IAmCxB,UAGI,sBAAKM,UAAU,aAAf,UACI,uBAAOM,QAAQ,GAAf,4BAGA,uBACIC,KAAK,OACLT,KAAK,UACLE,UAAU,eACVQ,YAAY,iBACZC,SAAUd,EACVI,MAAOb,OAKf,sBAAKc,UAAU,aAAf,UACI,uBAAOM,QAAQ,GAAf,8BAEA,uBACIC,KAAK,OACLT,KAAK,cACLE,UAAU,eACVQ,YAAY,kBACZC,SAAUd,EACVI,MAAOZ,OAKf,sBAAKa,UAAU,aAAf,UACI,uBAAOM,QAAQ,GAAf,mBAIA,uBACIC,KAAK,OACLT,KAAK,QACLE,UAAU,eACVS,SAAUd,EACVI,MAAOX,OAIf,sBAAKY,UAAU,aAAf,UACI,uBAAOM,QAAQ,GAAf,kBAGA,uBACIC,KAAK,OACLT,KAAK,OACLE,UAAU,eACVS,SAAUd,EACVI,MAAOV,OAIf,sBAAKW,UAAU,aAAf,UAEI,uBAAOM,QAAQ,GAAf,yBAGA,0BACIR,KAAK,WACLE,UAAU,eACVS,SAAUd,EACVI,MAAOT,OAKf,wBAAQoB,KAAK,SAASV,UAAU,kBAAhC,iCC/FOW,EA3CF,SAAC,GAA0B,IAAzBpB,EAAwB,EAAxBA,KAAMqB,EAAkB,EAAlBA,aAGb1B,EAA+CK,EAA/CL,QAASC,EAAsCI,EAAtCJ,YAAaC,EAAyBG,EAAzBH,MAAOC,EAAkBE,EAAlBF,KAAMC,EAAYC,EAAZD,SAG3C,OACA,sBAAKU,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,kBAGA,qBAAKA,UAAU,MAAf,SACI,wBACIO,KAAK,SACLP,UAAU,QACVa,aAAW,QACXC,QAAS,kBAAMF,EAAarB,EAAKa,KAJrC,SAMI,sBAAMW,cAAY,OAAlB,2BAKhB,sBAAKf,UAAU,YAAf,UACI,0CAAad,KACb,2CAAWC,KACX,wCAAWC,KACX,uCAAUC,KACV,8CAAcC,YC8CP0B,MA3Ef,WAGE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEjDJ,IACFA,EAAiB,IANN,MASiBhC,mBAAUgC,GAT3B,mBASNK,EATM,KASCC,EATD,KAWbC,qBAAU,WACaN,KAAKC,MAAMC,aAAaC,QAAQ,UAEjDD,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE/CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAG9C,CAACJ,IAIJ,IASMV,EAAe,SAAAR,GACnB,IAAMuB,EAAcL,EAAMM,QAAO,SAAArC,GAAI,OAAIA,EAAKa,KAAKA,KACnDmB,EAAaI,IAGTE,EAAwB,IAAfP,EAAMQ,OAAa,eAAiB,uBAEnD,OACE,eAAC,WAAD,WAEA,qBAAK9B,UAAU,4BAAf,SACE,qBAAKA,UAAU,YAAf,SACE,oBAAIA,UAAU,YAAd,4CAIF,qBAAKA,UAAU,YAAf,SAEA,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACD,cAAC,EAAD,CACChB,UA9BU,SAAAO,GAEhBgC,EAAa,GAAD,mBACPD,GADO,CAEV/B,UA6BE,sBAAKS,UAAU,MAAf,UACE,6BAAK6B,IACJP,EAAMS,KAAI,SAAAxC,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNqB,aAAcA,GAFTrB,EAAKa,mBCpDT4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c0c15dc3.chunk.js","sourcesContent":["import {Fragment, useState} from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    const [cita, actualizarCita] = useState({\r\n        mascota : '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas:''\r\n    });\r\n\r\n    const [ error, actualizarError ] = useState(false);\r\n \r\n\r\n    const actualizarState = e =>{\r\n        \r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    \r\n    const { mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    //envia el formulario al presionar boton\r\n    const submitCita = e =>{\r\n        e.preventDefault();\r\n\r\n        //validar\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            actualizarError(true);\r\n            return;\r\n        } \r\n\r\n        //eliminar mensaje de error\r\n        actualizarError(false);\r\n\r\n        //asignar id\r\n        cita.id = uuidv4();\r\n\r\n        //crear la cita\r\n        crearCita(cita);\r\n\r\n        //actualizar la cita\r\n        actualizarCita({\r\n            mascota : '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas:''\r\n        })\r\n        \r\n\r\n\r\n\r\n        \r\n    }\r\n    \r\nreturn ( \r\n<Fragment>\r\n    <h2>Crear cita</h2>\r\n\r\n    {error ? <p className=\"alert alert-danger\">Todos los campos son obligatorios</p> : null}\r\n\r\n\r\n    <form \r\n        onSubmit={submitCita}\r\n    >\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"\">\r\n                Nombre Mascota\r\n            </label>\r\n            <input \r\n                type=\"text\" \r\n                name=\"mascota\" \r\n                className=\"form-control\" \r\n                placeholder=\"Nombre mascota\"\r\n                onChange={actualizarState}\r\n                value={mascota}\r\n            />\r\n\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"\">\r\n                Nombre Dueño </label>\r\n            <input \r\n                type=\"text\" \r\n                name=\"propietario\" \r\n                className=\"form-control\" \r\n                placeholder=\"Nombre dueño\" \r\n                onChange={actualizarState}\r\n                value={propietario}\r\n                />\r\n\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"\">\r\n                Fecha\r\n            </label>\r\n\r\n            <input \r\n                type=\"date\" \r\n                name=\"fecha\" \r\n                className=\"form-control\" \r\n                onChange={actualizarState}\r\n                value={fecha}\r\n            />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"\">\r\n                Hora\r\n            </label>\r\n            <input \r\n                type=\"time\" \r\n                name=\"hora\" \r\n                className=\"form-control\" \r\n                onChange={actualizarState}\r\n                value={hora}\r\n            />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n\r\n            <label htmlFor=\"\">\r\n                Síntomas\r\n            </label>\r\n            <textarea \r\n                name=\"sintomas\" \r\n                className=\"form-control\"\r\n                onChange={actualizarState}\r\n                value={sintomas}\r\n            >\r\n        </textarea>\r\n        </div>\r\n\r\n        <button tipe=\"submit\" className=\"btn btn-primary\">\r\n            Agregar cita\r\n        </button>\r\n\r\n    </form>\r\n\r\n\r\n\r\n</Fragment>\r\n\r\n\r\n);\r\n}\r\n\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import PropTypes from 'prop-types';\r\n\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n\r\n\r\nconst { mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n\r\nreturn (\r\n<div className=\"card\">\r\n    <div className=\"card-header\">\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                Cita\r\n            </div>\r\n            <div className=\"col\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"close\" \r\n                    aria-label=\"Close\"\r\n                    onClick={() => eliminarCita(cita.id)}\r\n                >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"card-body\">\r\n        <p>Mascota: {mascota}</p>\r\n        <p>Dueño: {propietario}</p>\r\n        <p>Fecha: {fecha}</p>\r\n        <p>Hora: {hora}</p>\r\n        <p>Síntomas: {sintomas}</p>\r\n    </div>\r\n</div>\r\n\r\n\r\n);\r\n}\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  //citas en localstorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  const [citas, guardarCitas] = useState (citasIniciales);\n\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if(citasIniciales){\n        localStorage.setItem('citas', JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n    \n  }, [citas]);\n\n\n\n  const crearCita = cita => {\n    \n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  //funcion eliminar cita\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id!==id);\n    guardarCitas(nuevasCitas)\n  }\n  \n  const titulo = citas.length===0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Administrador de Pacientes</h1>\n      </div>\n    </div>\n\n      <div className=\"container\">\n\n      <div className=\"row\">\n          <div className=\"col\">\n         <Formulario\n          crearCita = {crearCita}\n         />\n        </div>\n        <div className=\"col\">\n          <h2>{titulo}</h2>\n          {citas.map(cita =>(\n            <Cita\n              key={cita.id}\n              cita={cita}\n              eliminarCita={eliminarCita}\n            />\n          ))}\n        </div>\n      </div>\n\n\n    </div>\n\n</Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}